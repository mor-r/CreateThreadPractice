public class CreateThreadPractice2 {
    private interface F{
        int f(int n);
    }

    private static class Calculator{
        public long calC(int n,F f){
            long sum=0;
            for(int i=1;i<=n;i++){
                sum+=f.f(i);
            }
            return sum;
        }
    }

    private static class F1 implements F{
        @Override
        public int f(int n) {
            return n;
        }
    }

    private static class P1 extends Thread{
        private int count=100_0000;

        @Override
        public void run() {
            Calculator calculator1=new Calculator();
            long sum=calculator1.calC(count,new F1());
            System.out.println("1+2+3+...+n="+sum);
        }
    }

    private static class F2 implements F {
        @Override
        public int f(int n) {
            return 2*n-1;
        }
    }

    private static class P2 extends Thread{
        private int count=(100_0001/2+1);

        @Override
        public void run() {
            Calculator calculator2=new Calculator();
            long sum=calculator2.calC(count,new F2());
            System.out.println("1+3+5+...+n="+sum);
        }

    }

    private static class F3 implements F{
        @Override
        public int f(int n) {
            return n*n;
        }
    }

    private static class P3 extends Thread{
        private int count=10_0000;

        @Override
        public void run() {
            Calculator calculator3=new Calculator();
            long sum=calculator3.calC(count,new F3());
            System.out.println("1+4+9+...+n="+sum);
        }
    }
    public static void main(String[] args) {
        new P1().start();
        new P2().start();
        new P3().start();
    }
}
